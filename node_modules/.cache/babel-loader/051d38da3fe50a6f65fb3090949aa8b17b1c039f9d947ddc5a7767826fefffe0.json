{"ast":null,"code":"var _jsxFileName = \"D:\\\\my-dashboard\\\\src\\\\components\\\\ProtectedRoute.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProtectedRoute({\n  children,\n  allowedRoles\n}) {\n  _s();\n  const [loading, setLoading] = useState(false); // Disable loading state for now\n  const [authorized, setAuthorized] = useState(true); // Temporarily allow access\n\n  useEffect(() => {\n    // Comment out auth check for now\n    // const checkAuth = async () => {\n    //   try {\n    //     const res = await fetch(\"http://localhost:5000/api/auth/check-auth\", {\n    //       method: \"GET\",\n    //       credentials: \"include\",\n    //       headers: { \"Cache-Control\": \"no-store\" },\n    //     });\n    //     const data = await res.json();\n    //     console.log(\"Auth check response:\", data, \"Status:\", res.status);\n    //     if (res.ok && allowedRoles.includes(data.role)) {\n    //       setAuthorized(true);\n    //     } else {\n    //       setAuthorized(false);\n    //     }\n    //   } catch (err) {\n    //     console.error(\"Auth check error:\", err);\n    //     setAuthorized(false);\n    //   } finally {\n    //     setLoading(false);\n    //   }\n    // };\n    // checkAuth();\n\n    const handlePopState = () => {\n      setAuthorized(false);\n    };\n    window.addEventListener(\"popstate\", handlePopState);\n    return () => {\n      window.removeEventListener(\"popstate\", handlePopState);\n    };\n  }, [allowedRoles]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-white text-center mt-20\",\n    children: \"Checking authentication...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 23\n  }, this);\n  if (!authorized) {\n    localStorage.clear();\n    sessionStorage.clear();\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/my-dashboard/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 12\n    }, this);\n  }\n  return children;\n}\n_s(ProtectedRoute, \"sxPXPbREKmI5e9KyoJGmwqjkhts=\");\n_c = ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","children","allowedRoles","_s","loading","setLoading","authorized","setAuthorized","handlePopState","window","addEventListener","removeEventListener","className","fileName","_jsxFileName","lineNumber","columnNumber","localStorage","clear","sessionStorage","to","replace","_c","$RefreshReg$"],"sources":["D:/my-dashboard/src/components/ProtectedRoute.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nexport default function ProtectedRoute({ children, allowedRoles }) {\r\n  const [loading, setLoading] = useState(false); // Disable loading state for now\r\n  const [authorized, setAuthorized] = useState(true); // Temporarily allow access\r\n\r\n  useEffect(() => {\r\n    // Comment out auth check for now\r\n    // const checkAuth = async () => {\r\n    //   try {\r\n    //     const res = await fetch(\"http://localhost:5000/api/auth/check-auth\", {\r\n    //       method: \"GET\",\r\n    //       credentials: \"include\",\r\n    //       headers: { \"Cache-Control\": \"no-store\" },\r\n    //     });\r\n    //     const data = await res.json();\r\n    //     console.log(\"Auth check response:\", data, \"Status:\", res.status);\r\n    //     if (res.ok && allowedRoles.includes(data.role)) {\r\n    //       setAuthorized(true);\r\n    //     } else {\r\n    //       setAuthorized(false);\r\n    //     }\r\n    //   } catch (err) {\r\n    //     console.error(\"Auth check error:\", err);\r\n    //     setAuthorized(false);\r\n    //   } finally {\r\n    //     setLoading(false);\r\n    //   }\r\n    // };\r\n    // checkAuth();\r\n\r\n    const handlePopState = () => {\r\n      setAuthorized(false);\r\n    };\r\n    window.addEventListener(\"popstate\", handlePopState);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"popstate\", handlePopState);\r\n    };\r\n  }, [allowedRoles]);\r\n\r\n  if (loading) return <div className=\"text-white text-center mt-20\">Checking authentication...</div>;\r\n  if (!authorized) {\r\n    localStorage.clear();\r\n    sessionStorage.clear();\r\n    return <Navigate to=\"/my-dashboard/login\" replace />;\r\n  }\r\n\r\n  return children;\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,eAAe,SAASC,cAAcA,CAAC;EAAEC,QAAQ;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EACjE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEpDD,SAAS,CAAC,MAAM;IACd;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,MAAMa,cAAc,GAAGA,CAAA,KAAM;MAC3BD,aAAa,CAAC,KAAK,CAAC;IACtB,CAAC;IACDE,MAAM,CAACC,gBAAgB,CAAC,UAAU,EAAEF,cAAc,CAAC;IAEnD,OAAO,MAAM;MACXC,MAAM,CAACE,mBAAmB,CAAC,UAAU,EAAEH,cAAc,CAAC;IACxD,CAAC;EACH,CAAC,EAAE,CAACN,YAAY,CAAC,CAAC;EAElB,IAAIE,OAAO,EAAE,oBAAOL,OAAA;IAAKa,SAAS,EAAC,8BAA8B;IAAAX,QAAA,EAAC;EAA0B;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAClG,IAAI,CAACV,UAAU,EAAE;IACfW,YAAY,CAACC,KAAK,CAAC,CAAC;IACpBC,cAAc,CAACD,KAAK,CAAC,CAAC;IACtB,oBAAOnB,OAAA,CAACF,QAAQ;MAACuB,EAAE,EAAC,qBAAqB;MAACC,OAAO;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACtD;EAEA,OAAOf,QAAQ;AACjB;AAACE,EAAA,CA/CuBH,cAAc;AAAAsB,EAAA,GAAdtB,cAAc;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}