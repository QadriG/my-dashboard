{"ast":null,"code":"var _jsxFileName = \"D:\\\\my-dashboard\\\\src\\\\components\\\\ProtectedRoute.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProtectedRoute({\n  children,\n  allowedRoles\n}) {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [authorized, setAuthorized] = useState(false);\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        // Prevent cached response\n        const res = await fetch(\"http://localhost:5000/api/auth/check-auth\", {\n          method: \"GET\",\n          credentials: \"include\",\n          headers: {\n            \"Cache-Control\": \"no-store\"\n          }\n        });\n        const data = await res.json();\n        if (res.ok && allowedRoles.includes(data.role)) {\n          setAuthorized(true);\n        } else {\n          // Clear any leftover tokens/state\n          localStorage.clear();\n          sessionStorage.clear();\n          setAuthorized(false);\n        }\n      } catch {\n        localStorage.clear();\n        sessionStorage.clear();\n        setAuthorized(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n\n    // Prevent browser back navigation after logout\n    const handlePopState = () => {\n      setAuthorized(false);\n    };\n    window.addEventListener(\"popstate\", handlePopState);\n    return () => {\n      window.removeEventListener(\"popstate\", handlePopState);\n    };\n  }, [allowedRoles]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 23\n  }, this);\n  if (!authorized) return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/my-dashboard/login\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 27\n  }, this);\n  return children;\n}\n_s(ProtectedRoute, \"gikolyhxMALaF5kh7V57C2MeGx8=\");\n_c = ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","children","allowedRoles","_s","loading","setLoading","authorized","setAuthorized","checkAuth","res","fetch","method","credentials","headers","data","json","ok","includes","role","localStorage","clear","sessionStorage","handlePopState","window","addEventListener","removeEventListener","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","_c","$RefreshReg$"],"sources":["D:/my-dashboard/src/components/ProtectedRoute.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nexport default function ProtectedRoute({ children, allowedRoles }) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [authorized, setAuthorized] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        // Prevent cached response\r\n        const res = await fetch(\"http://localhost:5000/api/auth/check-auth\", {\r\n          method: \"GET\",\r\n          credentials: \"include\",\r\n          headers: { \"Cache-Control\": \"no-store\" },\r\n        });\r\n\r\n        const data = await res.json();\r\n\r\n        if (res.ok && allowedRoles.includes(data.role)) {\r\n          setAuthorized(true);\r\n        } else {\r\n          // Clear any leftover tokens/state\r\n          localStorage.clear();\r\n          sessionStorage.clear();\r\n          setAuthorized(false);\r\n        }\r\n      } catch {\r\n        localStorage.clear();\r\n        sessionStorage.clear();\r\n        setAuthorized(false);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n\r\n    // Prevent browser back navigation after logout\r\n    const handlePopState = () => {\r\n      setAuthorized(false);\r\n    };\r\n    window.addEventListener(\"popstate\", handlePopState);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"popstate\", handlePopState);\r\n    };\r\n  }, [allowedRoles]);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (!authorized) return <Navigate to=\"/my-dashboard/login\" replace />;\r\n\r\n  return children;\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,eAAe,SAASC,cAAcA,CAAC;EAAEC,QAAQ;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EACjE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEnDD,SAAS,CAAC,MAAM;IACd,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;UACnEC,MAAM,EAAE,KAAK;UACbC,WAAW,EAAE,SAAS;UACtBC,OAAO,EAAE;YAAE,eAAe,EAAE;UAAW;QACzC,CAAC,CAAC;QAEF,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;QAE7B,IAAIN,GAAG,CAACO,EAAE,IAAId,YAAY,CAACe,QAAQ,CAACH,IAAI,CAACI,IAAI,CAAC,EAAE;UAC9CX,aAAa,CAAC,IAAI,CAAC;QACrB,CAAC,MAAM;UACL;UACAY,YAAY,CAACC,KAAK,CAAC,CAAC;UACpBC,cAAc,CAACD,KAAK,CAAC,CAAC;UACtBb,aAAa,CAAC,KAAK,CAAC;QACtB;MACF,CAAC,CAAC,MAAM;QACNY,YAAY,CAACC,KAAK,CAAC,CAAC;QACpBC,cAAc,CAACD,KAAK,CAAC,CAAC;QACtBb,aAAa,CAAC,KAAK,CAAC;MACtB,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,SAAS,CAAC,CAAC;;IAEX;IACA,MAAMc,cAAc,GAAGA,CAAA,KAAM;MAC3Bf,aAAa,CAAC,KAAK,CAAC;IACtB,CAAC;IACDgB,MAAM,CAACC,gBAAgB,CAAC,UAAU,EAAEF,cAAc,CAAC;IAEnD,OAAO,MAAM;MACXC,MAAM,CAACE,mBAAmB,CAAC,UAAU,EAAEH,cAAc,CAAC;IACxD,CAAC;EACH,CAAC,EAAE,CAACpB,YAAY,CAAC,CAAC;EAElB,IAAIE,OAAO,EAAE,oBAAOL,OAAA;IAAAE,QAAA,EAAK;EAAU;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACzC,IAAI,CAACvB,UAAU,EAAE,oBAAOP,OAAA,CAACF,QAAQ;IAACiC,EAAE,EAAC,qBAAqB;IAACC,OAAO;EAAA;IAAAL,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAErE,OAAO5B,QAAQ;AACjB;AAACE,EAAA,CAlDuBH,cAAc;AAAAgC,EAAA,GAAdhC,cAAc;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}