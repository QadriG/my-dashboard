{"ast":null,"code":"var _jsxFileName = \"D:\\\\my-dashboard\\\\src\\\\components\\\\Auth\\\\ResetPassword.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ResetPassword() {\n  _s();\n  const {\n    token\n  } = useParams();\n  const navigate = useNavigate();\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const handleReset = async e => {\n    e.preventDefault();\n    setError(\"\");\n    if (password !== confirmPassword) return setError(\"Passwords do not match\");\n    try {\n      const res = await fetch(`http://localhost:5000/api/auth/reset-password/${token}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          password\n        })\n      });\n      const data = await res.json();\n      if (res.ok) {\n        setSuccess(\"Password reset successful! Redirecting to login...\");\n        setTimeout(() => navigate(\"/my-dashboard/login\"), 2000);\n      } else setError(data.message || \"Failed to reset password\");\n    } catch {\n      setError(\"Server error\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center justify-center h-screen w-screen text-white bg-black\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleReset,\n      className: \"p-8 bg-gray-900 rounded-lg w-full max-w-sm\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold mb-6 text-center\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"New Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        className: \"w-full mb-4 p-3 rounded bg-gray-800\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Confirm Password\",\n        value: confirmPassword,\n        onChange: e => setConfirmPassword(e.target.value),\n        className: \"w-full mb-6 p-3 rounded bg-gray-800\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"w-full p-3 bg-orange-500 rounded\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-500 mt-2\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 19\n      }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-green-500 mt-2\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(ResetPassword, \"RqbuaFgsMrx9MkzyK+jW+ewfcIM=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","useParams","useNavigate","jsxDEV","_jsxDEV","ResetPassword","_s","token","navigate","password","setPassword","confirmPassword","setConfirmPassword","error","setError","success","setSuccess","handleReset","e","preventDefault","res","fetch","method","headers","body","JSON","stringify","data","json","ok","setTimeout","message","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["D:/my-dashboard/src/components/Auth/ResetPassword.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\n\r\nexport default function ResetPassword() {\r\n  const { token } = useParams();\r\n  const navigate = useNavigate();\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [success, setSuccess] = useState(\"\");\r\n\r\n  const handleReset = async (e) => {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n    if (password !== confirmPassword) return setError(\"Passwords do not match\");\r\n\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/api/auth/reset-password/${token}`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ password }),\r\n      });\r\n      const data = await res.json();\r\n      if (res.ok) {\r\n        setSuccess(\"Password reset successful! Redirecting to login...\");\r\n        setTimeout(() => navigate(\"/my-dashboard/login\"), 2000);\r\n      } else setError(data.message || \"Failed to reset password\");\r\n    } catch {\r\n      setError(\"Server error\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-center h-screen w-screen text-white bg-black\">\r\n      <form onSubmit={handleReset} className=\"p-8 bg-gray-900 rounded-lg w-full max-w-sm\">\r\n        <h2 className=\"text-2xl font-bold mb-6 text-center\">Reset Password</h2>\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"New Password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          className=\"w-full mb-4 p-3 rounded bg-gray-800\"\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Confirm Password\"\r\n          value={confirmPassword}\r\n          onChange={(e) => setConfirmPassword(e.target.value)}\r\n          className=\"w-full mb-6 p-3 rounded bg-gray-800\"\r\n          required\r\n        />\r\n        <button type=\"submit\" className=\"w-full p-3 bg-orange-500 rounded\">Reset Password</button>\r\n        {error && <p className=\"text-red-500 mt-2\">{error}</p>}\r\n        {success && <p className=\"text-green-500 mt-2\">{success}</p>}\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}