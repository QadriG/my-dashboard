
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  resetToken: 'resetToken',
  resetTokenExp: 'resetTokenExp',
  isVerified: 'isVerified',
  verificationToken: 'verificationToken',
  status: 'status',
  tokenVersion: 'tokenVersion',
  free: 'free',
  used: 'used',
  total: 'total',
  lastActivity: 'lastActivity'
};

exports.Prisma.TradeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  exchange: 'exchange',
  symbol: 'symbol',
  side: 'side',
  amount: 'amount',
  price: 'price',
  fee: 'fee',
  pnl: 'pnl',
  tradeTime: 'tradeTime',
  status: 'status'
};

exports.Prisma.AlertLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  exchange: 'exchange',
  symbol: 'symbol',
  action: 'action',
  tp: 'tp',
  sl: 'sl',
  rawPayload: 'rawPayload',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserExchangeAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  ccxtId: 'ccxtId',
  type: 'type',
  apiKey: 'apiKey',
  apiSecret: 'apiSecret',
  passphrase: 'passphrase',
  label: 'label',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BalanceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  exchange: 'exchange',
  asset: 'asset',
  free: 'free',
  used: 'used',
  total: 'total',
  totalPositions: 'totalPositions',
  fetchedAt: 'fetchedAt'
};

exports.Prisma.PositionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  exchange: 'exchange',
  symbol: 'symbol',
  side: 'side',
  amount: 'amount',
  entryPrice: 'entryPrice',
  currentPrice: 'currentPrice',
  pnl: 'pnl',
  status: 'status',
  openedAt: 'openedAt',
  closedAt: 'closedAt',
  leverage: 'leverage'
};

exports.Prisma.ExchangeMetaScalarFieldEnum = {
  id: 'id',
  name: 'name',
  ccxtId: 'ccxtId',
  type: 'type',
  enabled: 'enabled',
  createdAt: 'createdAt'
};

exports.Prisma.LogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tvId: 'tvId',
  exchange: 'exchange',
  symbol: 'symbol',
  request: 'request',
  message: 'message',
  level: 'level',
  createdAt: 'createdAt'
};

exports.Prisma.SyncLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  exchange: 'exchange',
  type: 'type',
  status: 'status',
  message: 'message',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Trade: 'Trade',
  AlertLog: 'AlertLog',
  UserExchangeAccount: 'UserExchangeAccount',
  Balance: 'Balance',
  Position: 'Position',
  ExchangeMeta: 'ExchangeMeta',
  Log: 'Log',
  SyncLog: 'SyncLog'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\my-dashboard\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\my-dashboard\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// ==========================================\n// Prisma Schema for Multi-Exchange Integration\n// ==========================================\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// =====================\n// User & Authentication\n// =====================\nmodel User {\n  id                Int       @id @default(autoincrement())\n  email             String    @unique\n  password          String\n  name              String?\n  role              String    @default(\"user\") // user, admin, agent\n  createdAt         DateTime  @default(now())\n  updatedAt         DateTime  @updatedAt\n  resetToken        String?\n  resetTokenExp     DateTime?\n  isVerified        Boolean   @default(false)\n  verificationToken String?\n  status            String    @default(\"active\") // active, paused, disabled\n  tokenVersion      Int       @default(0)\n  free              Float     @default(0)\n  used              Float     @default(0)\n  total             Float     @default(0)\n  lastActivity      DateTime?\n\n  // Relations\n  trades    Trade[]\n  alerts    AlertLog[]\n  exchanges UserExchangeAccount[]\n  logs      Log[]\n  positions Position[]\n  balances  Balance[]\n  syncLogs  SyncLog[]\n}\n\n// ==============\n// Core Data\n// ==============\nmodel Trade {\n  id        Int      @id @default(autoincrement())\n  user      User     @relation(fields: [userId], references: [id])\n  userId    Int\n  exchange  String\n  symbol    String\n  side      String\n  amount    Float\n  price     Float\n  fee       Float? // optional for future fee tracking\n  pnl       Float? // profit/loss\n  tradeTime DateTime @default(now())\n  status    String   @default(\"completed\") // completed, pending, failed\n}\n\n// ====================\n// Alerts (TradingView)\n// ====================\nmodel AlertLog {\n  id         Int      @id @default(autoincrement())\n  user       User?    @relation(fields: [userId], references: [id])\n  userId     Int?\n  exchange   String\n  symbol     String\n  action     String\n  tp         Float?\n  sl         Float?\n  rawPayload Json\n  status     String   @default(\"pending\")\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n}\n\n// =====================\n// Unified Exchange Account\n// =====================\nmodel UserExchangeAccount {\n  id         Int      @id @default(autoincrement())\n  user       User     @relation(fields: [userId], references: [id])\n  userId     Int\n  provider   String // Binance, OKX, Bybit, Coinbase, Blofin, Bitunix\n  ccxtId     String? // e.g., binance, okx, bybit\n  type       String? // spot, futures\n  apiKey     String\n  apiSecret  String\n  passphrase String?\n  label      String? // optional user label\n  isActive   Boolean  @default(true)\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  @@unique([userId, provider, type])\n}\n\n// =====================\n// Balances Table\n// =====================\nmodel Balance {\n  id             Int      @id @default(autoincrement())\n  user           User     @relation(fields: [userId], references: [id])\n  userId         Int\n  exchange       String\n  asset          String\n  free           Float    @default(0)\n  used           Float    @default(0)\n  total          Float    @default(0)\n  totalPositions Int      @default(0) // Added for UserDashboard\n  fetchedAt      DateTime @default(now())\n\n  @@unique([userId, exchange, asset])\n}\n\n// =====================\n// Positions / Orders\n// =====================\nmodel Position {\n  id           Int       @id @default(autoincrement())\n  user         User      @relation(fields: [userId], references: [id])\n  userId       Int\n  exchange     String\n  symbol       String\n  side         String // buy/sell\n  amount       Float\n  entryPrice   Float\n  currentPrice Float?\n  pnl          Float?\n  status       String    @default(\"open\")\n  openedAt     DateTime  @default(now())\n  closedAt     DateTime?\n  leverage     Float? // optional, for futures positions\n}\n\n// =====================\n// Exchange Metadata\n// =====================\nmodel ExchangeMeta {\n  id        Int      @id @default(autoincrement())\n  name      String   @unique\n  ccxtId    String\n  type      String? // spot/futures\n  enabled   Boolean  @default(true)\n  createdAt DateTime @default(now())\n\n  @@unique([ccxtId, type]) // ✅ allows same ccxtId for different types\n}\n\n// =====================\n// Logging & Sync Tracking\n// =====================\nmodel Log {\n  id        Int      @id @default(autoincrement())\n  user      User?    @relation(fields: [userId], references: [id])\n  userId    Int?\n  tvId      String?\n  exchange  String?\n  symbol    String?\n  request   String?\n  message   String\n  level     String   @default(\"INFO\")\n  createdAt DateTime @default(now())\n}\n\nmodel SyncLog {\n  id        Int      @id @default(autoincrement())\n  user      User?    @relation(fields: [userId], references: [id])\n  userId    Int?\n  exchange  String\n  type      String // balances, orders, positions, trades\n  status    String   @default(\"success\")\n  message   String?\n  createdAt DateTime @default(now())\n}\n",
  "inlineSchemaHash": "c7ab9dba440b1a89116232535601469ee2d2d9d3dd4733a4cf452cbb7f65fd2d",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"resetToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resetTokenExp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"verificationToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tokenVersion\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"free\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"used\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"total\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"lastActivity\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"trades\",\"kind\":\"object\",\"type\":\"Trade\",\"relationName\":\"TradeToUser\"},{\"name\":\"alerts\",\"kind\":\"object\",\"type\":\"AlertLog\",\"relationName\":\"AlertLogToUser\"},{\"name\":\"exchanges\",\"kind\":\"object\",\"type\":\"UserExchangeAccount\",\"relationName\":\"UserToUserExchangeAccount\"},{\"name\":\"logs\",\"kind\":\"object\",\"type\":\"Log\",\"relationName\":\"LogToUser\"},{\"name\":\"positions\",\"kind\":\"object\",\"type\":\"Position\",\"relationName\":\"PositionToUser\"},{\"name\":\"balances\",\"kind\":\"object\",\"type\":\"Balance\",\"relationName\":\"BalanceToUser\"},{\"name\":\"syncLogs\",\"kind\":\"object\",\"type\":\"SyncLog\",\"relationName\":\"SyncLogToUser\"}],\"dbName\":null},\"Trade\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TradeToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"exchange\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"symbol\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"side\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"fee\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"pnl\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"tradeTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"AlertLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AlertLogToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"exchange\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"symbol\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tp\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"sl\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"rawPayload\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"UserExchangeAccount\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserExchangeAccount\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ccxtId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"apiKey\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"apiSecret\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passphrase\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"label\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Balance\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BalanceToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"exchange\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"asset\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"free\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"used\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"total\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalPositions\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"fetchedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Position\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PositionToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"exchange\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"symbol\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"side\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"entryPrice\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currentPrice\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"pnl\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"openedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"closedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"leverage\",\"kind\":\"scalar\",\"type\":\"Float\"}],\"dbName\":null},\"ExchangeMeta\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ccxtId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"enabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Log\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"LogToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"tvId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"exchange\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"symbol\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"request\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"level\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"SyncLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SyncLogToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"exchange\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

