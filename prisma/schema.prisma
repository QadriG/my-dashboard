generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  password          String
  name              String?
  role              String         @default("user")
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  resetToken        String?
  resetTokenExp     DateTime?
  isVerified        Boolean        @default(false)
  verificationToken String?

  trades            Trade[]
  alerts            AlertLog[]
  exchanges         UserExchange[]
  apis              UserAPI[]      // ✅ Opposite relation for UserAPI
  logs              Log[]          // ✅ Opposite relation for Log
}

model Trade {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  symbol    String
  amount    Float
  price     Float
  tradeTime DateTime @default(now())
}

model AlertLog {
  id          Int       @id @default(autoincrement())
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
  exchange    String
  symbol      String
  action      String    // buy/sell
  tp          Float?    // take profit
  sl          Float?    // stop loss
  rawPayload  Json      // store full alert JSON
  status      String    @default("pending") // pending, executed, failed
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model UserExchange {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  exchange  String
  apiKey    String
  apiSecret String
  createdAt DateTime @default(now())
}

model UserAPI {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  exchangeName   String
  apiKey         String
  apiSecret      String
  spotEnabled    Boolean  @default(false)
  futuresEnabled Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Log {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  tvId      String?
  exchange  String?
  symbol    String?
  request   String?
  message   String
  level     String   @default("INFO") // INFO, ERROR, WARN
  createdAt DateTime @default(now())
}
