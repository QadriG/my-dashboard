generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String
  name              String?
  role              String    @default("user") // user, admin, agent
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  resetToken        String?
  resetTokenExp     DateTime?
  isVerified        Boolean   @default(false)
  verificationToken String?

  status            String    @default("active")  // active, paused, disabled
  tokenVersion      Int       @default(0)
  free              Float     @default(0)
  used              Float     @default(0)
  total             Float     @default(0)
  lastActivity      DateTime?

  trades            Trade[]
  alerts            AlertLog[]
  exchanges         UserExchange[]
  apis              UserAPI[]
  logs              Log[]
  positions         Position[]
}

model Trade {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  symbol    String
  amount    Float
  price     Float
  tradeTime DateTime @default(now())
}

model AlertLog {
  id          Int       @id @default(autoincrement())
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
  exchange    String
  symbol      String
  action      String
  tp          Float?
  sl          Float?
  rawPayload  Json
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model UserExchange {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  exchange  String
  apiKey    String
  apiSecret String
  createdAt DateTime @default(now())
}

model UserAPI {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  exchangeName   String
  apiKey         String
  apiSecret      String
  spotEnabled    Boolean  @default(false)
  futuresEnabled Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Log {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  tvId      String?
  exchange  String?
  symbol    String?
  request   String?
  message   String
  level     String   @default("INFO")
  createdAt DateTime @default(now())
}

model Position {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  symbol    String
  amount    Float
  price     Float
  action    String   // buy/sell
  openedAt  DateTime @default(now())
  status    String   @default("open")
}
